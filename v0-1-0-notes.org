
* Forcing function
+ find a textbook example to reproduce in a test
+ first layer only
+ first layer has arrows out but not in
+ subsequent layers can have arrows out and in
+ user provides input of shape either (n_compartments,) or (n_layers, 2, n_compartments)
+ former case: tc from ff comp to other comps; there is no xfer in/out of this compartment in subsequent layers
+ latter case: for each layer, first row is arrows out; second row is arrows in (zeros for first layer)
+ the ff is represented in the model as an additional compartment
+ ff is compatible with prelayer, but user cannot provide a prelayer tac for it
+ solver must skip over ff compartment for the first layer

* Voiding
** API
+ User creates objects of class Voiding
+ Pass them to solving methods:
#+begin_src python
voiding : list[Voiding]
#+end_src

** to solve a layer
+ ordered_voids_in_layer = _ordered_voids_in_layer(: list[Voiding], layer: int)
+ solve from initial time to first VoidingLayer.time in list
+ change the initial conditions for the next interval: (1 - VoidingLayer.fractions) * soln at end time
+ solve from first VoidingLayer.time to second VoidingLayer.time, etc
+ solve last VoidingLayer.time to end time
+ record the nuclei voided in variable in model soln
+ can void in forcing function compartments after the first layer
