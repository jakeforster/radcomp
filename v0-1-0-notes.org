
* Forcing function
+ find a textbook example to reproduce in a test
+ first layer only
+ first layer has arrows out but not in
+ subsequent layers can have arrows out and in
+ user provides input of shape either (n_compartments,) or (n_layers, 2, n_compartments)
+ former case: tc from ff comp to other comps; there is no xfer in/out of this compartment in subsequent layers
+ latter case: for each layer, first row is arrows out; second row is arrows in (zeros for first layer)
+ the ff is represented in the model as an additional compartment
+ ff is compatible with prelayer, but user cannot provide a prelayer tac for it
+ solver must skip over ff compartment for the first layer

* Voiding / elution
+ write a test first
+ solve in intervals and adjust initial conditions
+ specify void times and (layer,compartment) tuples
+ can supply more than 1, but not for the same layer,compartment tuple

Void class
Init: list of (layer index, compartment index) tuples and list of void times

Soln init:
Take a Void object or a list of Void objects

Soln steps
1. Take all the Void objects and build a list of void times for each layer, e.g. for layer 1
   [[[compartment index 1, compartment index 2], time_void_1 ], [compartment index 3], time_void_2]]
2. Order elements by void time
   [[compartment index 3], time_void_2], [[compartment index 1, compartment index 2], time_void_1 ]]
3. Solve layer 1 from t_i to time_void_2. Change initial conditions by setting compartment index 3 to zero.
   Solve from time_void_2 to time_void_1, etc.
